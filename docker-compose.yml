# Docker Compose configuration for Summarizer API

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: summarizer-db
    environment:
      POSTGRES_DB: summarizer
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - summarizer-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d summarizer"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: summarizer-redis
    command: redis-server --appendonly yes --appendfsync everysec
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - summarizer-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped

  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    container_name: summarizer-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - summarizer-network
    environment:
      OLLAMA_HOST: 0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 300s  # 5 minutes for model download
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          memory: 2G

  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: summarizer-api
    environment:
      DATABASE_URL: postgresql://user:password@db:5432/summarizer
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      OLLAMA_MODEL: gemma3:1b
      LOG_LEVEL: INFO
      PYTHONPATH: /app
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
    networks:
      - summarizer-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_started  # Don't wait for health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G

  # Background Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: summarizer-worker
    environment:
      DATABASE_URL: postgresql://user:password@db:5432/summarizer
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      OLLAMA_MODEL: gemma3:1b
      LOG_LEVEL: INFO
      PYTHONPATH: /app
    volumes:
      - ./logs:/app/logs
    networks:
      - summarizer-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_started  # Don't wait for health check
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; redis.from_url('redis://redis:6379/0').ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M

  # Prometheus (Optional - Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: summarizer-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - summarizer-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    profiles: ["monitoring"]

  # Grafana (Optional - Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: summarizer-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - summarizer-network
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_ALLOW_EMBEDDING: true
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    profiles: ["monitoring"]

networks:
  summarizer-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local